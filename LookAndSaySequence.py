__author__ = 'Danylo'


# http://www.geeksforgeeks.org/look-and-say-sequence/
# Look-and-Say Sequence
# Find the n'th term in Look-and-say (Or Count and Say) Sequence.
# The look-and-say sequence is the sequence of below integers:
# 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, ...
# How is above sequence generated?
# n'th term in generated by reading (n-1)'th term.


class LookAndSay:

    def __init__(self):
        pass

    # static cache
    cache = ["1", "11", "21", "1211", "111221", "312211"]

    @staticmethod
    def next_string(string):
        assert len(string) > 1

        current_char = string[0]
        next_str = [0, current_char]
        next_str_index = 0

        for i in range(0, len(string), 1):
            if string[i] == current_char:
                next_str[next_str_index] += 1
            else:
                current_char = string[i]
                next_str_index += 2
                next_str.append(1)
                next_str.append(current_char)

        return "".join(map(lambda e: str(e), next_str))

    def get(self, n):
        if n < 1:
            raise "Index " + n + " is out of range, has to be a positive integer."

        if n > len(LookAndSay.cache):
            LookAndSay.cache.append(LookAndSay.next_string(self.get(n - 1)))

        return LookAndSay.cache[n - 1]

sequence = LookAndSay()

for i in range(1, 25, 1):
    print sequence.get(i)
